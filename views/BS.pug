each item in projects
      .cell
        a(href=item.live_link)
          img.thumbnail(src=item.image_urls[0], alt=item.description)
          h5= item.project_name


// route to render project details dynamically
app.get('/projects/:id', (req, res) => {
  const projectId = req.params.id;
  const project = projectsData.projects.find(proj => proj.id === projectId);

  if (!project) {
    return res.status(404).send('Project not found');
  }

  res.render('project', { project });
});





// basic requirements 
const path = require('path');
const express = require('express');
const app = express();

// require json data
const projectData = require('./data.json'); // Adjusted the path if necessary

// require pug 
const pug = require('pug');

// Construct the absolute path to the "public" directory
const publicPath = path.join(__dirname, 'public');

// Serve static files from the "public" directory
app.use(express.static(publicPath));

// Explicitly set MIME type for .js files
app.use(express.static(publicPath, {
  setHeaders: (res, path, stat) => {
    if (path.endsWith('.js')) {
      res.setHeader('Content-Type', 'application/javascript');
    }
  }
}));



// Specify the views directory
app.set("views", path.join(__dirname, 'views'));

// Set routes
app.get("/about", (req, res) => {
  res.render("about"); // Renders views/about.pug
});

// Route to render the Pug template with project data
app.get("/", (req, res) => {
  res.render('index', { projects: projectData.projects }); // Renders views/index.pug
});

// start server on specified port
app.listen(3000, () => {
  console.log("App listening on port 3000");
});




// Explicitly set MIME type for .js files
app.use(express.static(publicPath, {
  setHeaders: (res, path, stat) => {
    if (path.endsWith('.js')) {
      res.setHeader('Content-Type', 'application/javascript');
    }
  }
}));









        //- Use the info in your data file and the comments below to complete this template

        //- Use interpolation to dynamically add the project title
        h1 #{project.project_name}

        //- Use interpolation to dynamically add the project description
        p #{project.description}

      .project-tech-links-box.box
        h6 Technologies
        ul
          //- Use an `each` iterator and interpolation to dynamically replace the li tags below with the technologies listed for this project
          each tech in project.technologies
            li #{tech}

        //- Add the href values to the links below
        a.btn-link(href='${project.live_link}', target='_blank') Live Demo
        a.btn-link(href='${project.github_link}', target='_blank') GitHub Repo

    .project-img-box.box
      //- Replace the URLs in the src attributes below with interpolated template literals to dynamically add your project images, and add descriptions to the alt attributes
      each image in project.images
        img.project-img(src='${project.image_urls[1].png}')
        img.project-img(src='${project.image_urls[2].png}')
        img.project-img(src='${project.image_urls[3].png}')